{"version":3,"file":"pixi-marquee-selection.js","sources":["../src/index.ts"],"sourcesContent":["import {\n    Color,\n    type ColorSource,\n    Container,\n    type ContainerOptions,\n    DOMAdapter,\n    Texture,\n    Ticker,\n    TilingSprite\n} from 'pixi.js';\n\n/**\n * Options for the MarchingAnts class.\n */\ninterface MarqueeSelectionOptions extends ContainerOptions\n{\n    /**\n     * Thickness of the line\n     * @default 2\n     */\n    thickness?: number;\n    /**\n     * Color of the line\n     * @default 'white'\n     */\n    color?: ColorSource;\n    /**\n     * The dash length\n     * @default 2\n     */\n    dash?: number;\n    /**\n     * The space between dashes\n     * @default 2\n     */\n    dashSpace?: number;\n    /**\n     * The speed of the animation\n     * @default 0.2\n     */\n    speed?: number;\n    /**\n     * The width of the marching ants box\n     * @default 100\n     */\n    width?: number;\n    /**\n     * The height of the marching ants box\n     * @default 100\n     */\n    height?: number;\n    /**\n     * Whether to use Ticker.shared to auto update animation time.\n     * @default true\n     */\n    autoUpdate?: boolean;\n}\n\n/**\n * Marching Ants is a UI component commonly used\n * to indicate a selection area. It is a dashed line.\n * @see https://en.wikipedia.org/wiki/Marching_ants\n */\nclass MarqueeSelection extends Container\n{\n    /** The thickness of the line, set by constructor options */\n    public readonly thickness: number;\n    /** The color of the line, set by constructor options */\n    public readonly dash: number;\n    /** The space between dashes, set by constructor options */\n    public readonly dashSpace: number;\n    /** The speed of the animation, set by constructor options */\n    public readonly speed: number;\n    /** Used for the top line */\n    protected _topLine: TilingSprite;\n    /** Used for the left line */\n    protected _leftLine: TilingSprite;\n    /** Used for the right line */\n    protected _rightLine: TilingSprite;\n    /** Used for the bottom line */\n    protected _bottomLine: TilingSprite;\n    /** The texture used for the lines */\n    protected _texture: Texture;\n    /** `true` uses Ticker.shared to auto update animation time. */\n    protected _autoUpdate: boolean = true;\n    /** The current time of the animation */\n    protected _currentTime = 0;\n\n    /**\n     * @param options - The options for the marching ants.\n     */\n    constructor({\n        thickness = 2,\n        color = 'white',\n        dash = 2,\n        dashSpace = 2,\n        speed = 0.2,\n        width = 100,\n        height = 100,\n        autoUpdate = true,\n        ...rest\n    }: MarqueeSelectionOptions = {})\n    {\n        super(rest);\n\n        this.thickness = thickness;\n        this.dash = dash;\n        this.dashSpace = dashSpace;\n        this.speed = speed;\n\n        // Draw a 4 x 4 texture as a grid\n        const canvas = DOMAdapter.get().createCanvas(\n            dash + dashSpace,\n            dash + dashSpace\n        );\n        const ctx = canvas.getContext('2d')!;\n\n        ctx.fillStyle = Color.shared.setValue(color).toRgbaString();\n        ctx.fillRect(0, 0, dash, dash);\n        const texture = this._texture = Texture.from(canvas);\n\n        texture.source.scaleMode = 'nearest';\n\n        this._topLine = new TilingSprite({\n            roundPixels: true,\n            texture,\n            width,\n            height: thickness\n        });\n        this._leftLine = new TilingSprite({\n            roundPixels: true,\n            texture,\n            width: thickness,\n            height,\n        });\n        this._rightLine = new TilingSprite({\n            roundPixels: true,\n            texture,\n            width: thickness,\n            height,\n        });\n        this._bottomLine = new TilingSprite({\n            roundPixels: true,\n            texture,\n            width,\n            height: thickness,\n        });\n        this.resize(width, height);\n        this.addChild(\n            this._topLine,\n            this._leftLine,\n            this._rightLine,\n            this._bottomLine\n        );\n        this.autoUpdate = autoUpdate;\n    }\n\n    /**\n     * Resize the dimensions\n     * @param width - The width of the marching ants box\n     * @param height - The height of the marching ants box\n     */\n    public resize(width: number, height: number)\n    {\n        const l = this.thickness;\n\n        this._topLine.position.set(-l, -l);\n        this._leftLine.position.set(-l, 0);\n        this._rightLine.position.set(width, 0);\n        this._bottomLine.position.set(-l, height);\n\n        this._topLine.width = width + l * 2;\n        this._bottomLine.width = width + l * 2;\n        this._leftLine.height = height;\n        this._rightLine.height = height;\n    }\n\n    /**\n     * Update the marching ants animation. This is called automatically\n     * if `autoUpdate` is `true` (default). If you'd like to tick this manually\n     * set `autoUpdate` to `false` and call this method manually.\n     */\n    public update()\n    {\n        if (this.visible)\n        {\n            this._currentTime += this.speed;\n            const size = this.dash + this.dashSpace;\n            // avoid large numbers for the position as precision\n            // issues will cause this to stop working\n\n            this._topLine.tilePosition.x = this._currentTime % size;\n            this._bottomLine.tilePosition.x = -this._currentTime % size;\n            this._leftLine.tilePosition.y = -this._currentTime % size;\n            this._rightLine.tilePosition.y = this._currentTime % size;\n        }\n    }\n\n    /** Whether to use Ticker.shared to auto update animation time. */\n    public get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n    public set autoUpdate(value: boolean)\n    {\n        this._autoUpdate = value;\n        Ticker.shared.remove(this.update, this);\n        if (value)\n        {\n            Ticker.shared.add(this.update, this);\n        }\n    }\n\n    /**\n     * Destroy the marching ants, don't use after calling this.\n     */\n    public destroy()\n    {\n        if (this.destroyed) return;\n        this.autoUpdate = false;\n        this._topLine.destroy();\n        this._leftLine.destroy();\n        this._rightLine.destroy();\n        this._bottomLine.destroy();\n        this._texture.destroy(true);\n        this.removeChildren();\n        super.destroy(true);\n        Object.assign(this, {\n            _topLine: undefined,\n            _leftLine: undefined,\n            _rightLine: undefined,\n            _bottomLine: undefined,\n            _texture: undefined,\n        });\n    }\n}\n\nexport { MarqueeSelection };\n"],"names":["MarqueeSelection","Container","_a","_b","thickness","color","dash","dashSpace","speed","width","height","autoUpdate","rest","__objRest","__publicField","canvas","DOMAdapter","ctx","Color","texture","Texture","TilingSprite","l","size","value","Ticker"],"mappings":"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"}